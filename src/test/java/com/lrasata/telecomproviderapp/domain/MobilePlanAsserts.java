package com.lrasata.telecomproviderapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MobilePlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobilePlanAllPropertiesEquals(MobilePlan expected, MobilePlan actual) {
        assertMobilePlanAutoGeneratedPropertiesEquals(expected, actual);
        assertMobilePlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobilePlanAllUpdatablePropertiesEquals(MobilePlan expected, MobilePlan actual) {
        assertMobilePlanUpdatableFieldsEquals(expected, actual);
        assertMobilePlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobilePlanAutoGeneratedPropertiesEquals(MobilePlan expected, MobilePlan actual) {
        assertThat(actual)
            .as("Verify MobilePlan auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobilePlanUpdatableFieldsEquals(MobilePlan expected, MobilePlan actual) {
        assertThat(actual)
            .as("Verify MobilePlan relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getInternetDataInGB()).as("check internetDataInGB").isEqualTo(expected.getInternetDataInGB()))
            .satisfies(a ->
                assertThat(a.getUnlimitedSmsAndCalls()).as("check unlimitedSmsAndCalls").isEqualTo(expected.getUnlimitedSmsAndCalls())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMobilePlanUpdatableRelationshipsEquals(MobilePlan expected, MobilePlan actual) {
        // empty method
    }
}
